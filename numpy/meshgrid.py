'''
Meshgrid experiments

Meshgrid creates a rectangular grid out of two or more arrays. The return value of meshgrid is 
two more arrays of the same shape as the input arrays. 

In the case of two input arrays, the first array contains x values and the second array contains 
y values. When paired together the two arrays contain every possible x,y pair thus forming the grid.

So, if we want to create a grid where we have a point at each integer value between 
0 and 4 in both the x and y directions. To create a rectangular grid, we need every 
combination of the  x and y points.

Rectangular grids created by meshgrid can be used to sample a function. We will use meshgirds to sample
models generated by a machine learning algorithms. 

Return coordinate matrices from coordinate vectors.

Make N-D coordinate arrays for vectorized evaluations of N-D scalar/vector fields over N-D grids, given one-dimensional 
coordinate arrays x1, x2,..., xn.

Changed in version 1.9: 1-D and 0-D cases are allowed.

----
Call signature:
    numpy.meshgrid(*xi, **kwargs)

Parameters:	
    x1, x2,..., xn : array_like
    1-D arrays representing the coordinates of a grid.

    indexing : {‘xy’, ‘ij’}, optional
    Cartesian (‘xy’, default) or matrix (‘ij’) indexing of output. See Notes for more details.
    New in version 1.7.0.

    sparse : bool, optional
    If True a sparse grid is returned in order to conserve memory. Default is False.
    New in version 1.7.0.

    copy : bool, optional
    If False, a view into the original arrays are returned in order to conserve memory. 
    Default is True. Please note that sparse=False, copy=False will likely return non-contiguous arrays. 
    Furthermore, more than one element of a broadcast array may refer to a single memory location. 
    If you need to write to the arrays, make copies first.
    New in version 1.7.0.

Returns:	
    X1, X2,..., XN : ndarray
    For vectors x1, x2,..., ‘xn’ with lengths Ni=len(xi) , return (N1, N2, N3,...Nn) shaped arrays if indexing=’ij’ 
    or (N2, N1, N3,...Nn) shaped arrays if indexing=’xy’ with the elements of xi repeated to fill the matrix along the 
    first dimension for x1, the second for x2 and so on.

https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html#numpy.meshgrid

'''

import numpy as np


x = np.arange(0, 6, 1)
y = np.arange(0, 6, 1)
z = np.arange(0, 6, 1)

xx, yy, zz = np.meshgrid(x, y, z)

print(xx)
print('------')
print(yy)
print('------')
print(zz)

for x_array,y_array,z_array in zip(xx, yy, zz):
    for x,y,z in zip(x_array, y_array, z_array):
        print('x:  ' + str(x) + '  y:  ' + str(y) + '  z:  ' + str(z))
